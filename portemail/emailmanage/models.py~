from django.db import models
from django.contrib.auth.models import User, UserManager
from django.conf import settings
# Create your models here.


class TypeMeta(models.Model):
	cname = models.CharField(max_length=50)
	ename = models.CharField(max_length=50,blank=True)
	ename_abbr = models.CharField(max_length=20,blank=True)
	class Meta:
		abstract = True



class ShipType(TypeMeta):
	pass



class TermType(TypeMeta):
	pass
	
		
class bagType(TypeMeta):
	pass

class CargoType(TypeMeta):
	pass


class FillChoices:
	@staticmethod
	def get_ship_type_choices():
		r = []
		all_entries = ShipType.objects.all()
		for obj in all_entries:
			r = r + [(obj.id, obj.cname)]
		return r
		
	@staticmethod
	def get_term_type_choices():
		r = []
		all_entries = TermType.objects.all()
		for obj in all_entries:
			r = r + [(obj.id, obj.cname)]
		return r
		
	@staticmethod
	def get_bag_type_choices():
		r = []
		all_entries = BagType.objects.all()
		for obj in all_entries:
			r = r + [(obj.id, obj.cname)]
		return r    
		
	@staticmethod
	def get_bag_type_choices():
		r = []
		all_entries = BagType.objects.all()
		for obj in all_entries:
			r = r + [(obj.id, obj.cname)]
		return r



SHIP_TYPE_CHOICES = (
    ('1', '杂货船'),
    ('2', '散装船'),
    ('3', '多用途船'),
    ('4', '重吊船'),
    ('5', '集装箱船'),
    ('6', '汽船'),
    ('7', '液化气船'),
    ('8', '滚装船'),
    ('9', '化学品船'),
)

TERM_TYPE_CHOICES = (
    ('FLT', 'FLT-班轮条款'),
    ('FIOST', 'FIOST-船东不负责装、卸、堆装、平舱'),
    ('FI', 'FI-船东不负责装'),
    ('FO', 'FO-船东不负责卸'),
    ('FIO', 'FIO-船东不负责装、卸'),
    ('FILO', 'FILO-船东不负责装但负责卸'),
    ('LIFO', 'LIFO-船东负责装不负责卸'),
)

TIME_ZONE_CHOICES = (
    ('1', '杂货船'),
    ('2', '散装船'),
    ('3', '多用途船'),
    ('4', '重吊船'),
    ('5', '集装箱船'),
    ('6', '汽船'),
    ('7', '液化气船'),
    ('8', '滚装船'),
    ('9', '化学品船'),
    ('10', '化学品船'),
    ('11', '化学品船'),
    ('12', '化学品船'),
    ('13', '化学品船'),
    ('14', '化学品船'),
    ('15', '化学品船'),
    ('16', '化学品船'),
    ('17', '化学品船'),
    ('18', '化学品船'),
    ('19', '化学品船'),
    ('20', '化学品船'),
    ('21', '化学品船'),
    ('22', '化学品船'),
    ('23', '化学品船'),
    ('24', '化学品船'),
)

class Sender(models.Model):
	email = models.EmailField(max_length=100)
	name = models.CharField(max_length=20)
	post = models.CharField(max_length=20,blank=True)
	telephone = models.CharField(max_length=15)
	mobile = models.CharField(max_length=15,blank=True)
	fax = models.CharField(max_length=15,blank=True)
	skype = models.CharField(max_length=15,blank=True)
	qq = models.CharField(max_length=10,blank=True)
	company_name = models.CharField(max_length=80,blank=True)
	def __str__(self):
		return self.name
	
class CustomUser(models.Model):
	user = models.OneToOneField(User)
	name = models.CharField(max_length=10,blank=True)
	post = models.CharField(max_length=10,blank=True)
	telephone = models.CharField(max_length=15,blank=True)
	mobile = models.CharField(max_length=15,blank=True)
	fax = models.CharField(max_length=15,blank=True)
	skype = models.CharField(max_length=15,blank=True)
	qq = models.CharField(max_length=10,blank=True)
	company_name = models.CharField(max_length=100,blank=True)
	def __str__(self):
		 return self.name
	

class Ship(models.Model):
	vessel_name = models.CharField(max_length=20)
	dwt = models.DecimalField(max_digits=10,decimal_places =2)
	built = models.DateField()
	type = models.CharField(max_length=2,choices=SHIP_TYPE_CHOICES)
	flag = models.CharField(max_length=20,blank=True)
	loa = models.DecimalField(max_digits=6,decimal_places =2)
	beam = models.DecimalField(max_digits=5,decimal_places =2)
	depth = models.DecimalField(max_digits=5,decimal_places =2)
	draft = models.DecimalField(max_digits=5,decimal_places =2)
	grain = models.DecimalField(max_digits=10,decimal_places =2)
	hatch = models.IntegerField()
	tpc = models.DecimalField(max_digits=5,decimal_places =2,blank=True, null=True)
	imo = models.CharField(max_length=20,blank=True)
	call_sign = models.CharField(max_length=20,blank=True)
	pi_club = models.CharField(max_length=10,blank=True)	
	ship_class = models.CharField(max_length=10,blank=True)
	gear = models.CharField(max_length=20,blank=True)
	memo = models.TextField(max_length=256,blank=True)
	def __str__(self):
		return self.vessel_name


class Tonnage(models.Model):
	ship= models.ForeignKey(Ship, on_delete=models.CASCADE)
	sender = models.ForeignKey(Sender, on_delete=models.CASCADE)
	recorder = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
	open_start_date = models.DateField()
	open_end_date = models.DateField()
	open_area = models.CharField(max_length=50)
	memo = models.TextField(max_length=256,blank=True)
	send_time = models.DateTimeField()
	record_time = models.DateTimeField(auto_now_add=True)
	def __str__(self):
		return self.open_area


class Cargo(models.Model):
	loading_port= models.ForeignKey(Ship, on_delete=models.CASCADE, related_name='loading')
	discharge_port= models.ForeignKey(Ship, on_delete=models.CASCADE,related_name='discharge')
	sender = models.ForeignKey(Sender, on_delete=models.CASCADE)
	recorder = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
	cargo_name = models.CharField(max_length=100)
	cargo_type = models.CharField(max_length=2)
	quantity_ton = models.DecimalField(max_digits=10,decimal_places =2,blank=True, null=True)
	quantity_cubic_meter = models.DecimalField(max_digits=10,decimal_places =2,blank=True, null=True)
	laycan_start = models.DateField()
	laycan_end = models.DateField()
	package = models.CharField(max_length=2,blank=True)
	sf = models.DecimalField(max_digits=4,decimal_places =2,blank=True, null=True)
	ldRate = models.DecimalField(max_digits=4,decimal_places =2,blank=True, null=True)
	frt_dollar = models.DecimalField(max_digits=10,decimal_places =2,blank=True, null=True)
	frt_RMB = models.DecimalField(max_digits=10,decimal_places =2,blank=True, null=True)
	crane = models.CharField(max_length=100,blank=True)
	comm = models.DecimalField(max_digits=4,decimal_places =2,blank=True, null=True)
	term = models.CharField(max_length=5,blank=True)
	memo = models.TextField(max_length=256,blank=True)
	send_time = models.DateTimeField()
	record_time = models.DateTimeField(auto_now_add=True)
	def __str__(self):
		return self.cargo_name


class Tct(models.Model):
	sender = models.ForeignKey(Sender, on_delete=models.CASCADE)
	recorder = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
	account = models.CharField(max_length=50,blank=True)
	dwt = models.DecimalField(max_digits=10,decimal_places =2)
	delivery = models.CharField(max_length=50)
	redelivery = models.CharField(max_length=50)
	laycan_start = models.DateField()
	laycan_end = models.DateField()
	duration = models.CharField(max_length=20)
	type = models.CharField(max_length=2,choices=SHIP_TYPE_CHOICES)
	max_age= models.IntegerField(blank=True, null=True)
	crane = models.CharField(max_length=50,blank=True)
	grain = models.DecimalField(max_digits=10,decimal_places =2,blank=True, null=True)
	hatch = models.IntegerField(blank=True, null=True)
	memo = models.TextField(max_length=256,blank=True)
	sendTime = models.DateTimeField()	
	recordTime = models.DateTimeField(auto_now_add=True)
	def __str__(self):
		return self.account



class Port(models.Model):
	port_code = models.CharField(max_length=20,primary_key =True)
	port_cname = models.CharField(max_length=30)
	port_ename = models.CharField(max_length=50)
	country = models.CharField(max_length=30)
	currency = models.CharField(max_length=10)
	time_zone= models.IntegerField()
	berth = models.CharField(max_length=256,blank=True)
	max_loa = models.DecimalField(max_digits=8,decimal_places =2,blank=True, null=True)
	draft_limit = models.DecimalField(max_digits=10,decimal_places =3,blank=True, null=True)
	lifts_tons = models.CharField(max_length=50,blank=True, null=True)
	ldRate = models.DecimalField(max_digits=4,decimal_places =2,blank=True, null=True)
	cranes_mobile= models.BooleanField(blank=True)
	cranes_floating= models.BooleanField(blank=True)
	web_site = models.CharField(max_length=50,blank=True)
	memo = models.TextField(max_length=256,blank=True)
	def __str__(self):
		return self.port_cname



class Agent(models.Model):
	email = models.EmailField(max_length=100)
	name = models.CharField(max_length=20)
	telephone = models.CharField(max_length=15)
	mobile = models.CharField(max_length=11,blank=True)
	fax = models.CharField(max_length=15,blank=True)
	skype = models.CharField(max_length=15,blank=True)
	QQ = models.CharField(max_length=10,blank=True)
	company_name = models.CharField(max_length=80)
	company_abbr = models.CharField(max_length=20)
	company_address = models.CharField(max_length=100,blank=True)
	web_site = models.CharField(max_length=50,blank=True)
	company_about = models.TextField(max_length=256,blank=True)
	port_code = models.CharField(max_length=200)
	port_cname = models.CharField(max_length=200)
	country = models.CharField(max_length=30)
	def __str__(self):
		return self.name


class Star(models.Model):
	user_name = models.EmailField(max_length=100)
	record_id = models.IntegerField()
	flag_Time = models.DateTimeField(auto_now_add=True)
	memo = models.TextField(max_length=256,blank=True)
	class Meta:
		abstract = True
		unique_together = (("user_name", "record_id"),)



class StarTonnage(Star):
	pass
	
	
class StarCargo(Star):
	pass
	
		
class StarTct(Star):
	pass
	
	

SELECTED_STATUS_CHOICES = ( )

class Selected(models.Model):
	user_name = models.EmailField(max_length=100)
	record_id = models.IntegerField()
	selected_Time = models.DateTimeField(auto_now_add=True)
	status = models.CharField(max_length=1,choices=SELECTED_STATUS_CHOICES)
	memo = models.TextField(max_length=256,blank=True)
	class Meta:
		abstract = True
		unique_together = (("user_name", "record_id"),)



class SelectedTonnage(Selected):
	pass



class SelectedCargo(Selected):
	pass


class SelectedTct(Selected):
	pass



class EmailVerifyRecord(models.Model):
    # 验证码
    code = models.CharField(max_length=20, verbose_name=u"验证码")
    email = models.EmailField(max_length=50, verbose_name=u"邮箱")
    # 包含注册验证和找回验证
    send_type = models.CharField(verbose_name=u"验证码类型", max_length=10, choices=(("register",u"注册"), ("forget",u"找回密码")))
    send_time = models.DateTimeField(verbose_name=u"发送时间", default=datetime.now)
    class Meta:
        verbose_name = u"邮箱验证码"
        verbose_name_plural = verbose_name
    def __unicode__(self):
        return '{0}({1})'.format(self.code, self.email)
